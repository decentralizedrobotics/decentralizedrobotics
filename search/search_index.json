{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Home","text":""},{"location":"index.html#decentralized-robotics-dero","title":"Decentralized Robotics (DeRo)","text":"<p>Software and components for secure serverless monitoring and control your ROS 2 based robots using Web 3 technology.</p> <p>Decentralized Robotics does not replace traditional DDS based ROS 2 communication, but rather augments it with a secure and decentralized cryptographic identity and communication channel using libp2p and the Interplanetary Filesystem.</p> <p>This project consists of several components:</p> <ul> <li> <p><code>RosWeb3Bridge</code> \u2013 an implementation of the ROS bridge protocol over libp2p.</p> </li> <li> <p><code>dero</code> \u2013 a command line interface for provisioning Robots and associating users.</p> </li> <li> <p><code>dero_web</code> \u2013 a Web Application, hosted on IPFS, for monitoring or controlling your robot using libp2p swarm.</p> </li> <li> <p><code>ROS2.ts</code> - a Typescript library for interacting with ROS 2 from a web browser or a node.js application.</p> </li> <li> <p><code>babylon_ros</code> - a Typescript library which connects to a ROS 2 bridge using ROS2.ts and renders the robot and UI in 3D and WebXR using Babylon.js.</p> </li> </ul>"},{"location":"index.html#introduction-video","title":"Introduction Video","text":"<p>Warning</p> <p>This project is currently bootstrapping, and will be made available to a select few during initial bringup to minimize churn and support. If you'd like to be considered for early access, please post an issue to this github repo.</p>"},{"location":"About/Background.html","title":"Background","text":""},{"location":"About/Background.html#about","title":"About","text":"<p>Ranch Hand Robotics provides education materials, developer tooling and solutions for Outdoor Robotics. Decentralized Robotics was built out of a need to use robots on a homestead - a place where blanketing the property with Wifi is not feasible and cell coverage is non-existent. </p> <p>I'd like to thank the developers and communities of the following projects for their work which has made this project possible:</p> <ul> <li>Open Robotics Foundation</li> <li>Libp2p Project</li> <li>IPFS Project</li> <li>RobotWebTools developers</li> <li>ROS rclnodejs developers</li> </ul>"},{"location":"About/Background.html#contributing","title":"Contributing","text":"<p>Please refer to the contribution guidelines in the individual projects for details on how to contribute to this project.</p>"},{"location":"About/Background.html#donations","title":"Donations","text":"<p>If you are able to, please support Open Robotics Foundation, Protocol Labs and the IPFS project. This project would not be possible without their work.</p> <ul> <li>Open Robotics</li> <li>Protocol Labs</li> <li>IPFS Project</li> </ul>"},{"location":"About/Background.html#sponsors","title":"Sponsors","text":"<p>Ranch Hand Robotics is funded by Github Sponsorships and Patreon. If you are able, please consider sponsoring the project:</p> <ul> <li>Github</li> <li>Patreon</li> </ul>"},{"location":"About/Support.html","title":"Support","text":""},{"location":"About/Support.html#support","title":"Support","text":"<p>Please use the Ranch Hand Robotics discussions to report issues, feature requests, or to discuss the project, otherwise use:</p> <ul> <li>Issues</li> <li>Contribution Guidelines</li> <li>Ranch Hand Robotics Youtube Channel</li> </ul>"},{"location":"Developer/Guide.html","title":"Developer Guide","text":""},{"location":"Developer/Guide.html#ros2ts","title":"ROS2.ts","text":"<p>Decentralized Robotics includes a ROS 2 Web Bridge implemented in Typescript, which can be used by Web Applications, Electron or WASM applications. The bridge is available as an npm package.</p> <pre><code>npm install @polyhobbyist/ros2\n</code></pre>"},{"location":"Developer/Guide.html#babylonjs-ros-2-user-interface","title":"Babylon.js ROS 2 User Interface","text":"<p>Decentralized Robotics includes a Babylon.js ROS 2 User Interface implemented in Typescript, which can be used by Web Applications, Electron or WASM applications.</p> <pre><code>npm install @ranch-hand-robotics/babylon_ros\n</code></pre> <p>To support Collada (.dae) Files in Babylon.js which are common in ROS 2, we also include a Collada Loader for Babylon.js:</p> <pre><code>npm i @polyhobbyist/babylon-collada-loader\n</code></pre>"},{"location":"GettingStarted/Concepts.html","title":"Concepts","text":""},{"location":"GettingStarted/Concepts.html#concepts","title":"Concepts","text":"<p>This guide will provide a high level overview of concepts needed to set up your robots and users. </p>"},{"location":"GettingStarted/Concepts.html#cryptographic-identity","title":"Cryptographic identity","text":"<p>At the root of Decentralized Robotics, and libp2p is a cryptographic identity, which forms the basis of securing, authenticating and authorizing access in the decentralized peer-to-peer network.</p> <p>A Cryptographic identity contains 3 components:</p> <ul> <li>a Public Key, which can be shared with others.</li> <li>a Private Key, which must be kept secret. The private key 'proves' that the public key belongs to the holder of the private key.</li> <li>a p2p address, which is generated from the public key and is used to discover the node on the network. The p2p address is also used to by the operator or admin applications.</li> </ul> <p>Each Robot and each user will have a cryptographic identity. The robot's identity is generated during provisioning. The user's identity is generated separately and the p2p ID is added to the robot allow list.</p> <p>For DeRo, the output of identity creation is a json text file, which contains the 3 components. The user is responsible for storing this json file in a secure location. The public key and p2p address can be shared with others.</p> <p>In IPFS (and the technology it is built on libp2p) terminology, the cryptographic identity is called a peer identity.</p>"},{"location":"GettingStarted/Concepts.html#create-users","title":"Create Users","text":"<p>You can use the Command Line tool to create users. This will output a json file with a cryptographic identity. This file can be created by the end user, but an administrator needs to add the user's p2p address to the robot's allow list.</p> <pre><code>dros user create -f user.json\n</code></pre>"},{"location":"GettingStarted/Concepts.html#provision-a-robot","title":"Provision a Robot","text":"<p>During initial install of a robot, it needs to be provisioned. This is done by running <code>dero init</code>. This will generate a private key and store it in the robot's local storage.</p> <p>A Robot also needs to be informed of what users can access it, as well as what roles they have. This is done by running <code>dero user add</code>. This will add the user's p2p address to the robot's allow list.</p>"},{"location":"GettingStarted/Concepts.html#role-based-access-control","title":"Role Based Access Control","text":"<p>Users of a robot are assigned a role at provisioning time.</p> <p>Several roles are available:</p> <ul> <li><code>administrator</code> - can add and remove users, and change roles. An <code>administrator</code> is also an operator</li> <li><code>operator</code> - can connect to the robot and control it.</li> <li><code>monitor</code> - can connect to the robot and view it's status, but not control it. In ROS, this means a <code>monitor</code> can subscribe, but not publish.</li> <li><code>restricted</code> - can connect to the robot, but only subscribe to topics that are explicitly allowed.</li> </ul> <p>Restricted users need to be given explicit access to topics. More details are provided in the <code>dero</code> command line documentation.</p>"},{"location":"GettingStarted/Concepts.html#role-based-access-control-lists-on-blockchain","title":"Role-Based Access Control lists on Blockchain","text":"<p>User access lists are currently stored on the robot. However, in the future, these lists can be stored on a blockchain. This will allow for more flexible access control, controlling multiple robots, as well as the ability to revoke access remotely.</p>"},{"location":"GettingStarted/Concepts.html#private-relays","title":"Private Relays","text":"<p>By default, the robot and operator applications will use the public bootstrap nodes on libp2p network.</p> <p>However, both can be configured to use private relays. This is done by running the <code>dero relay</code> command. This will set the robot's relay to the provided p2p address. The p2p address is used to discover the relay on the network. The p2p address is also used to connect to the relay using the operator or admin application.</p>"},{"location":"GettingStarted/Concepts.html#administrative-web-app","title":"Administrative Web App","text":"<p>The administrative application is available through admin.decentralizedrobotics.xyz</p>"},{"location":"GettingStarted/Operator.html","title":"Operator","text":""},{"location":"GettingStarted/Operator.html#operator","title":"Operator","text":"<p>When someone wants to access a Robot using they can use the robotics console available at https://operator.decentralizedrobotics.xyz.</p>"},{"location":"GettingStarted/Operator.html#create-a-user-identity","title":"Create a User identity","text":"<p>If you do not have a User identity, you can create one using the web console. This will create a user.json file that can be downloaded. This should be kept in a secure location.</p> <p>The Web application will display the p2p address. This can be shared with the robot administrator to be added to the robot's allow list using the admin portal or command line application.</p>"},{"location":"GettingStarted/Operator.html#connect-to-a-robot","title":"Connect to a Robot","text":"<p>Load your credentials into the Web application, either by using the edit boxes, or by loading your credential file. Once it has been verified and connects to the p2p swarm, you can then enter the p2p address of the robot you want to connect to.</p> <p>If you have been provisioned correctly, the application will take you to an overview page, which allows you to select how you'd like to interact with the robot.</p>"},{"location":"GettingStarted/Operator.html#control-the-robot","title":"Control the Robot","text":"<p>If you have control authority of the robot, the console will provide UI for control. If available the network and the robot supports video streaming, the console will also provide a control and video user interface.</p>"},{"location":"GettingStarted/Operator.html#monitor-the-robot","title":"Monitor the Robot","text":"<p>If the operator has monitor authority, the console will provide a UI for monitoring the robot. This will allow you to view the robot's status, as well as subscribe to topics.</p>"},{"location":"GettingStarted/Operator.html#troubleshooting","title":"Troubleshooting","text":"<p>If you are having trouble connecting to the robot, please check the following:</p>"},{"location":"GettingStarted/Robot.html","title":"Robot","text":""},{"location":"GettingStarted/Robot.html#robot","title":"Robot","text":"<p>This guide will walk you through the steps to install the RosWeb3Bridge your robot and to provision it with a routable cryptographic identity and set up user access. Before using this guide, please read the Concepts guide.</p>"},{"location":"GettingStarted/Robot.html#robot-setup","title":"Robot Setup","text":"<p>NOTE: This guide represents the ideal flow, not as implemented yet. Please check back later.</p> LinuxWindows <pre><code># Install Node.js\ncurl -s https://deb.nodesource.com/setup_24.x | sudo bash\nsudo apt install -y nodejs\n\n# Source ROS 2 Humble or later\nsource /opt/ros/humble/setup.bash\n\n:: Provision your Robot\nnpm install dero\ndero init\n\n:: Add an Operator\ndero user add --id user_p2p_address --role administrator\n\n:: This will output the Robot's p2p address which can be used for discovery.\n\nnpm install rosweb3bridge\nros2web3bridge\n</code></pre> <pre><code>:: Install Node.js LTS\nwinget install nodejs\n\n:: Install Git\nwinget install git\n\n:: https://docs.ros.org/en/kilted/Installation/Windows-Install-Binary.html\n\ncd C:\\pixi_ws\npixi shell\ncall C:\\pixi_ws\\ros2-windows\\local_setup.bat\n\n:: Provision your Robot\nnpm install dero\ndero init\n\n:: This will output the Robot's p2p address which can be used for discovery.\n\nnpm install rosweb3bridge\nros2web3bridge\n</code></pre>"},{"location":"Other/Quick-SSH-Access.html","title":"Quick SSH Access","text":""},{"location":"Other/Quick-SSH-Access.html#ssh-bridge","title":"SSH Bridge","text":"<p>This page describes a way to quickly establish a libp2p connection between a computer and your robot using an SSH tunnel. You can route DDS Router traffic over this tunnel to connect to your robot's DDS network, or use the Visual Studio Code ROS Extension to remotely debug your robot.</p> <p>Warning</p> <p>The IPFS Swarm stream used below is considered experimental, pending more documentation and testing. </p> Robot SetupClient Setup LinuxWindows <p>(If you are on Jetson or Raspberry Pi, replace amd64 below with arm64) </p><pre><code>wget https://dist.ipfs.tech/kubo/v0.24.0/kubo_v0.24.0_linux-amd64.tar.gz\ntar -xvzf kubo_v0.24.0_linux-amd64.tar.gz\ncd kubo\nsudo bash install.sh\nipfs init\n</code></pre> Take node of the <code>peer identity:</code>. This is the 'routable cryptographic address' of your robot. You will need this to connect to your robot through the swarm. <pre><code>ipfs config --json Swarm.RelayClient.Enabled true\nipfs config --json Experimental.Libp2pStreamMounting true\n\nipfs daemon\n</code></pre> <p>In another terminal window, configure the Stream Listener, which forwards from the <code>/x/ssh</code> protocol to the local SSH server. (The protocol name <code>/x/ssh</code> is arbitrary, but must be the same on the robot and clients):</p> <pre><code>ipfs p2p listen /x/ssh /ip4/127.0.0.1/tcp/22\n</code></pre> <p></p><pre><code>wget https://dist.ipfs.tech/kubo/v0.24.0/kubo_v0.24.0_windows-amd64.zip -Outfile kubo_v0.24.0.zip\nExpand-Archive -Path kubo_v0.24.0.zip -DestinationPath C:\\opt\\kubo\nC:\\opt\\kubo\\ipfs init\n</code></pre> Take node of the <code>peer identity: 12D3XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX</code>. This is the 'routable cryptographic address' of your robot. You will need this to connect to your robot through the swarm. <pre><code>ipfs config --json Swarm.RelayClient.Enabled true\nipfs config --json Experimental.Libp2pStreamMounting true\n\nipfs daemon\n</code></pre> <p>In another terminal window, configure the Stream Listener, which forwards from the <code>/x/ssh</code> protocol to the local SSH server. (The protocol name <code>/x/ssh</code> is arbitrary, but must be the same on the robot and clients):</p> <pre><code>ipfs p2p listen /x/ssh /ip4/127.0.0.1/tcp/22\n</code></pre> <p>Recall the <code>peer identity</code> of your robot from the setting up the robot. You will need this to connect to your robot through the swarm.</p> LinuxWindows <p>(If you are on Jetson or Raspberry Pi, replace amd64 below with arm64) </p><pre><code>wget https://dist.ipfs.tech/kubo/v0.24.0/kubo_v0.24.0_linux-amd64.tar.gz\ntar -xvzf kubo_v0.24.0_linux-amd64.tar.gz\ncd kubo\nsudo bash install.sh\nipfs init\n</code></pre> <pre><code>ipfs config --json Swarm.RelayClient.Enabled true\nipfs config --json Experimental.Libp2pStreamMounting true\n\nipfs daemon\n</code></pre> <p>In another terminal window: </p><pre><code>ipfs p2p forward /x/ssh /ip4/127.0.0.1/tcp/2222 /p2p/12D3XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n</code></pre> <pre><code>wget https://dist.ipfs.tech/kubo/v0.24.0/kubo_v0.24.0_windows-amd64.zip -Outfile kubo_v0.24.0.zip\nExpand-Archive -Path kubo_v0.24.0.zip -DestinationPath C:\\opt\\kubo\nC:\\opt\\kubo\\ipfs init\nipfs config --json Swarm.RelayClient.Enabled true\nipfs config --json Experimental.Libp2pStreamMounting true\n\nipfs daemon\n</code></pre> <p>In another terminal window: </p><pre><code>ipfs p2p forward /x/ssh /ip4/127.0.0.1/tcp/2222 /p2p/12D3XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n</code></pre>"},{"location":"Other/Quick-SSH-Access.html#ssh-to-your-robot","title":"SSH to your Robot","text":"<p>You can now open an SSH connection to your robot using the following command:</p> <pre><code>```bash\nssh -p 2222 user@127.0.0.1\n```\n</code></pre> <p>or use Visual Studio Code's remote extension pack to connect to your robot.</p> <p>The way this works is that the SSH client will attempt to connect to a local port, which is actually serviced by the client side IPFS daemon. IPFS will then access the set of computers running the libp2p swarm network to locate the shortest connection to your robot, even if it is behind a NAT, firewall, or over cellular. </p> <p>On the Robot side, the IPFS daemon will unpackage the SSH connection and forward it to the local SSH server.</p>"},{"location":"Other/Quick-SSH-Access.html#references","title":"References","text":"<ul> <li>IPFS Kubo</li> <li>IPFS Swarm</li> <li>IPFS Relay</li> <li>IPFS Libp2p Stream Mounting</li> </ul>"}]}